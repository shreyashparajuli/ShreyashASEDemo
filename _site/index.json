{
  "api/ASE_Assignment.CircleFill.html": {
    "href": "api/ASE_Assignment.CircleFill.html",
    "title": "Class CircleFill | ASE Documentation",
    "keywords": "Class CircleFill Namespace ASE_Assignment Assembly ASE Assignment.dll public class CircleFill : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CircleFill Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() public override void Execute()"
  },
  "api/ASE_Assignment.CustomArrayCommand.html": {
    "href": "api/ASE_Assignment.CustomArrayCommand.html",
    "title": "Class CustomArrayCommand | ASE Documentation",
    "keywords": "Class CustomArrayCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom array command class that inherits from BOOSE.Array public class CustomArrayCommand : Array, ICommand Inheritance object Command Evaluation Array CustomArrayCommand Implements ICommand Inherited Members Array.PEEK Array.POKE Array.type Array.rows Array.columns Array.valueInt Array.valueReal Array.intArray Array.realArray Array.pokeValue Array.peekVar Array.rowS Array.columnS Array.row Array.column Array.ArrayRestrictions() Array.ReduceRestrictionCounter() Array.Compile() Array.CheckParameters(string[]) Array.Execute() Array.ProcessArrayParametersCompile(bool) Array.ProcessArrayParametersExecute(bool) Array.SetIntArray(int, int, int) Array.SetRealArray(double, int, int) Array.GetIntArray(int, int) Array.GetRealArray(int, int) Array.Rows Array.Columns Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class provides specialized array functionality by extending the base BOOSE.Array class Constructors CustomArrayCommand() Initializes a new instance of the CustomArrayCommand class public CustomArrayCommand() Remarks Upon instantiation, this constructor calls ReduceRestrictionCounter() to modify array restrictions"
  },
  "api/ASE_Assignment.CustomCanvas.html": {
    "href": "api/ASE_Assignment.CustomCanvas.html",
    "title": "Class CustomCanvas | ASE Documentation",
    "keywords": "Class CustomCanvas Namespace ASE_Assignment Assembly ASE Assignment.dll CustomCanvas provides a drawing surface using a PictureBox for output. It implements the BOOSE.ICanvas interface and supports drawing lines, shapes, and text, as well as changing the pen color and clearing the canvas. public class CustomCanvas : ICanvas Inheritance object CustomCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CustomCanvas() Parameterless constructor that initializes the canvas with a default size (xsize by ysize) and a white background. public CustomCanvas() CustomCanvas(PictureBox) Constructor that initializes the canvas to match a given PictureBox's size, then sets the default pen color and position. public CustomCanvas(PictureBox outputWindow) Parameters outputWindow PictureBox The PictureBox used for displaying the canvas. Fields _bitmap The Bitmap representing the canvas drawing surface. public Bitmap _bitmap Field Value Bitmap _graphics The Graphics object associated with the canvas bitmap. public Graphics _graphics Field Value Graphics _outputWindow The PictureBox used to display the canvas output. public PictureBox _outputWindow Field Value PictureBox _pen The current Pen used for drawing. public Pen _pen Field Value Pen _penColour The current pen color. public Color _penColour Field Value Color _penWidth Default pen width. public float _penWidth Field Value float xsize The default width of the canvas. public const int xsize = 640 Field Value int ysize The default height of the canvas. public const int ysize = 480 Field Value int Properties PenColour The current pen color used for drawing. public Color PenColour { get; set; } Property Value Color Xpos The current X position used for drawing references. public int Xpos { get; set; } Property Value int Ypos The current Y position used for drawing references. public int Ypos { get; set; } Property Value int Methods Circle(int, bool) Draws a circle at the current position with the specified radius. Optionally fills the circle instead of drawing only an outline. public void Circle(int radius, bool fill) Parameters radius int The radius of the circle. fill bool Whether to fill the circle (true) or only draw an outline (false). Clear() Clears the entire canvas by filling it with white. public void Clear() DrawTo(int, int) Draws a line from the current position to the specified (x, y) coordinates, then updates the current position to that point. public void DrawTo(int x, int y) Parameters x int The X coordinate to draw to. y int The Y coordinate to draw to. Exceptions CanvasException Thrown if the coordinates are out of valid range. MoveTo(int, int) Moves the current position to the specified coordinates without drawing. Logs the new position to the Debug console. public void MoveTo(int x, int y) Parameters x int X coordinate to move to. y int Y coordinate to move to. Rect(int, int, bool) Draws a rectangle at the current position with the specified width and height. Optionally fills the rectangle instead of drawing only an outline. public void Rect(int width, int height, bool fill) Parameters width int The width of the rectangle. height int The height of the rectangle. fill bool True to fill the rectangle, false to draw only an outline. Reset() Resets the canvas state by clearing it and setting the position to (0,0). public void Reset() Set(int, int) Sets the current drawing position without drawing a line. public void Set(int x, int y) Parameters x int The X coordinate to move to. y int The Y coordinate to move to. SetColour(int, int, int) Sets the pen color using RGB values. public void SetColour(int r, int g, int b) Parameters r int Red component (0-255). g int Green component (0-255). b int Blue component (0-255). Tri(int, int) Draws a triangle at the current position, given a width (base) and height. The triangle is drawn as an outline connecting three points and returning to the initial point. public void Tri(int width, int height) Parameters width int The width of the triangle's base. height int The height of the triangle. UpdateImage() Updates the PictureBox image with the current bitmap to reflect any recent drawing changes. public void UpdateImage() WriteText(string) Writes text at the current position on the canvas. Automatically strips any surrounding quotation marks from the text. public void WriteText(string text) Parameters text string The string of text to be rendered. getBitmap() Returns the current Bitmap of the canvas drawing surface. public object getBitmap() Returns object The current Bitmap that represents the canvas."
  },
  "api/ASE_Assignment.CustomCommandFactory.html": {
    "href": "api/ASE_Assignment.CustomCommandFactory.html",
    "title": "Class CustomCommandFactory | ASE Documentation",
    "keywords": "Class CustomCommandFactory Namespace ASE_Assignment Assembly ASE Assignment.dll A custom command factory extending BOOSE.CommandFactory to provide additional commands (e.g., \"tri\", \"write\", \"int\", \"real\", \"array\", \"while\", \"for\", \"if\", \"else\", \"end\", and \"method\"). Unrecognized commands are passed to the base factory or result in an exception. public class CustomCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory CustomCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This factory implements a custom command creation system that supports various programming constructs including control structures, data types, and basic commands. If a command is not recognized, it delegates to the base factory implementation. Methods MakeCommand(string) Creates a command object based on the specified commandType. Supports multiple custom commands and defers unknown commands to the base factory. public override ICommand MakeCommand(string commandType) Parameters commandType string The string representing the type of command to create. Supported values include: \"tri\",\"rect\",\"circle\" \"write\", \"int\", \"real\", \"array\", \"while\", \"for\", \"if\", \"else\", \"end\", and \"method\". Returns ICommand An BOOSE.ICommand instance corresponding to the requested command. Remarks The method processes the command type in a case-insensitive manner and trims whitespace. If the command is not recognized by this factory, it delegates to the base factory. If neither factory recognizes the command, a FactoryException is thrown. Exceptions FactoryException Thrown when the command type is not recognized by either this factory or the base factory."
  },
  "api/ASE_Assignment.CustomElseCommand.html": {
    "href": "api/ASE_Assignment.CustomElseCommand.html",
    "title": "Class CustomElseCommand | ASE Documentation",
    "keywords": "Class CustomElseCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the 'else' control structure, extending the base BOOSE.Else class public class CustomElseCommand : Else, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Else CustomElseCommand Implements ICommand Inherited Members Else.CheckParameters(string[]) Else.Compile() Else.Execute() Else.CorrespondingEnd CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class provides customized functionality for handling else statements within the ASE_Assignment namespace Methods Restrictions() Overrides the base Restrictions method to define custom restrictions for the else command public override void Restrictions() Remarks Currently implements an empty override of the base Restrictions method"
  },
  "api/ASE_Assignment.CustomForCommand.html": {
    "href": "api/ASE_Assignment.CustomForCommand.html",
    "title": "Class CustomForCommand | ASE Documentation",
    "keywords": "Class CustomForCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the 'for' loop control structure, extending the base BOOSE.For class public class CustomForCommand : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For CustomForCommand Implements ICommand Inherited Members For.Compile() For.Execute() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class provides customized functionality for handling for loop statements within the ASE_Assignment namespace Methods Restrictions() Overrides the base Restrictions method to define custom restrictions for the for loop command public override void Restrictions() Remarks Currently implements an empty override of the base Restrictions method"
  },
  "api/ASE_Assignment.CustomIfCommand.html": {
    "href": "api/ASE_Assignment.CustomIfCommand.html",
    "title": "Class CustomIfCommand | ASE Documentation",
    "keywords": "Class CustomIfCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the 'if' conditional statement, extending the base BOOSE.If class public class CustomIfCommand : If, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand If CustomIfCommand Implements ICommand Inherited Members CompoundCommand.ReduceRestrictions() CompoundCommand.CheckParameters(string[]) CompoundCommand.Compile() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class provides customized functionality for handling if statements with reduced restrictions Constructors CustomIfCommand() Initializes a new instance of the CustomIfCommand class public CustomIfCommand() Remarks The constructor calls ReduceRestrictions() to modify the default restrictions for this command Methods Restrictions() Overrides the base Restrictions method to define custom restrictions for the if command public override void Restrictions() Remarks Currently implements an empty override of the base Restrictions method"
  },
  "api/ASE_Assignment.CustomIntCommand.html": {
    "href": "api/ASE_Assignment.CustomIntCommand.html",
    "title": "Class CustomIntCommand | ASE Documentation",
    "keywords": "Class CustomIntCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the integer data type, extending the base BOOSE.Int class public class CustomIntCommand : Int, ICommand Inheritance object Command Evaluation Int CustomIntCommand Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class provides customized functionality for handling integer variables within the ASE_Assignment namespace Constructors CustomIntCommand() Initializes a new instance of the CustomIntCommand class public CustomIntCommand() Methods Restrictions() Overrides the base Restrictions method to define custom restrictions for integer variables public override void Restrictions() Remarks Currently implements an empty override of the base Restrictions method"
  },
  "api/ASE_Assignment.CustomRealComand.html": {
    "href": "api/ASE_Assignment.CustomRealComand.html",
    "title": "Class CustomRealComand | ASE Documentation",
    "keywords": "Class CustomRealComand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the real (floating-point) data type, extending the base BOOSE.Real class public class CustomRealComand : Real, ICommand Inheritance object Command Evaluation Real CustomRealComand Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class provides customized functionality for handling real number variables within the ASE_Assignment namespace Constructors CustomRealComand() Initializes a new instance of the CustomRealComand class public CustomRealComand() Methods Restrictions() Overrides the base Restrictions method to define custom restrictions for real number variables public override void Restrictions() Remarks Currently implements an empty override of the base Restrictions method"
  },
  "api/ASE_Assignment.CustomStoredProgram.html": {
    "href": "api/ASE_Assignment.CustomStoredProgram.html",
    "title": "Class CustomStoredProgram | ASE Documentation",
    "keywords": "Class CustomStoredProgram Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the StoredProgram class that executes commands sequentially while providing additional safety checks and error handling. public class CustomStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram CustomStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.SyntaxOk StoredProgram.AddMethod(Method) StoredProgram.GetMethod(string) StoredProgram.AddVariable(Evaluation) StoredProgram.GetVariable(string) StoredProgram.GetVariable(int) StoredProgram.FindVariable(Evaluation) StoredProgram.FindVariable(string) StoredProgram.VariableExists(string) StoredProgram.GetVarValue(string) StoredProgram.UpdateVariable(string, int) StoredProgram.UpdateVariable(string, double) StoredProgram.UpdateVariable(string, bool) StoredProgram.DeleteVariable(string) StoredProgram.IsExpression(string) StoredProgram.EvaluateExpressionWithString(string) StoredProgram.EvaluateExpression(string) StoredProgram.Push(ConditionalCommand) StoredProgram.Pop() StoredProgram.Add(Command) StoredProgram.NextCommand() StoredProgram.ResetProgram() StoredProgram.Commandsleft() StoredProgram.PC ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CustomStoredProgram(ICanvas) Initializes a new instance of the CustomStoredProgram class. public CustomStoredProgram(ICanvas canvas) Parameters canvas ICanvas The canvas interface used for drawing operations. Methods Run() Executes the stored program commands sequentially while implementing safety checks for infinite loops and handling execution errors. public override void Run() Exceptions StoredProgramException Thrown when an infinite loop is detected or when a BOOSE command execution fails."
  },
  "api/ASE_Assignment.CustomTriangleCommand.html": {
    "href": "api/ASE_Assignment.CustomTriangleCommand.html",
    "title": "Class CustomTriangleCommand | ASE Documentation",
    "keywords": "Class CustomTriangleCommand Namespace ASE_Assignment Assembly ASE Assignment.dll A custom command for drawing a triangle on the canvas. Inherits from BOOSE.CommandTwoParameters to handle width and height parameters. public class CustomTriangleCommand : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CustomTriangleCommand Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Ensures the command parameters are valid for the triangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array containing the width and height as strings. Exceptions CommandException Thrown if fewer than two parameters are provided. Execute() Executes the triangle-drawing command using the provided width and height parameters. public override void Execute() Exceptions RestrictionException Thrown if the triangle dimensions (width or height) are invalid (e.g., non-positive)."
  },
  "api/ASE_Assignment.CustomWhileCommand.html": {
    "href": "api/ASE_Assignment.CustomWhileCommand.html",
    "title": "Class CustomWhileCommand | ASE Documentation",
    "keywords": "Class CustomWhileCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the While command with modified restrictions. This class extends the base While command functionality while allowing for more flexible execution parameters. public class CustomWhileCommand : While, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand While CustomWhileCommand Implements ICommand Inherited Members CompoundCommand.ReduceRestrictions() CompoundCommand.CheckParameters(string[]) CompoundCommand.Compile() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CustomWhileCommand() Initializes a new instance of the CustomWhileCommand class. Reduces restrictions on command execution by calling ReduceRestrictions() during initialization. public CustomWhileCommand() Methods Restrictions() Overrides the base Restrictions method to remove any execution restrictions. This allows for more flexible while loop execution compared to the base implementation. public override void Restrictions()"
  },
  "api/ASE_Assignment.CustomWriteCommand.html": {
    "href": "api/ASE_Assignment.CustomWriteCommand.html",
    "title": "Class CustomWriteCommand | ASE Documentation",
    "keywords": "Class CustomWriteCommand Namespace ASE_Assignment Assembly ASE Assignment.dll A custom command for writing text on the canvas. Inherits from BOOSE.CommandOneParameter to handle a single parameter (the text to write). public class CustomWriteCommand : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter CustomWriteCommand Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Checks that at least one parameter (the text) is provided. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters; the first parameter is the text to write. Exceptions CommandException Thrown if no parameters are provided. Execute() Executes the text-writing command using the single parameter provided (i.e., the text to be drawn on the canvas). public override void Execute()"
  },
  "api/ASE_Assignment.Form1.html": {
    "href": "api/ASE_Assignment.Form1.html",
    "title": "Class Form1 | ASE Documentation",
    "keywords": "Class Form1 Namespace ASE_Assignment Assembly ASE Assignment.dll The main form of the application that provides an interface to write BOOSE scripts, run them, clear the canvas, and save the canvas image. public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() Initializes the form, sets up the canvas and parser, and attaches necessary event handlers. public Form1() Fields factory A factory to create command objects based on parsed instructions. public CommandFactory factory Field Value CommandFactory myCanvas Interface to the canvas object used for drawing. public ICanvas myCanvas Field Value ICanvas myProgram A container to store and run the parsed program commands. public StoredProgram myProgram Field Value StoredProgram parser Parses BOOSE script input into executable commands. public Parser parser Field Value Parser state To store bool value to load images. public bool state Field Value bool Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false. OutputWindow_Paint(object, PaintEventArgs) Paint event for the output window. Draws the current bitmap from the canvas onto the PictureBox. public void OutputWindow_Paint(object sender, PaintEventArgs e) Parameters sender object The source of the Paint event. e PaintEventArgs Paint event data containing the Graphics object. ProgramWindow_TextChanged(object, EventArgs) Real-time syntax validation as the user types. Avoids parsing if the input is too short to form a valid command. public void ProgramWindow_TextChanged(object sender, EventArgs e) Parameters sender object The source of the TextChanged event. e EventArgs Additional event data. Run_Click(object, EventArgs) Event handler for the Run button click. Attempts to parse and execute the user-entered BOOSE script. Displays errors if the parsing or execution fails. public void Run_Click(object sender, EventArgs e) Parameters sender object The source of the Run button click. e EventArgs Additional event data. TryParseProgram(string) Attempts to parse the given program text and update the background color based on success or failure. public void TryParseProgram(string programText) Parameters programText string The BOOSE script to parse. btnClearCanvas_Click(object, EventArgs) Clears the canvas when the Clear button is clicked. public void btnClearCanvas_Click(object sender, EventArgs e) Parameters sender object The source of the Click event. e EventArgs Additional event data. btnOpenImage_Click_1(object, EventArgs) Opens a file dialog for the user to select an image file to display on the canvas. public void btnOpenImage_Click_1(object sender, EventArgs e) Parameters sender object The source of the event, typically the button that was clicked. e EventArgs Event data associated with the click event. btnSaveCanvas_Click(object, EventArgs) Saves the current canvas image as a file when the Save button is clicked. Opens a SaveFileDialog to specify the file location and format. public void btnSaveCanvas_Click(object sender, EventArgs e) Parameters sender object The source of the Click event. e EventArgs Additional event data. openFileDialog1_FileOk(object, CancelEventArgs) Handles the FileOk event triggered when the user selects a file in the open file dialog. Loads the selected image and displays it in the output window. public void openFileDialog1_FileOk(object sender, CancelEventArgs e) Parameters sender object The source of the event, typically the file dialog control. e CancelEventArgs Event data indicating whether the operation was canceled."
  },
  "api/ASE_Assignment.RectFill.html": {
    "href": "api/ASE_Assignment.RectFill.html",
    "title": "Class RectFill | ASE Documentation",
    "keywords": "Class RectFill Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to draw a rectangle with optional fill functionality on a canvas. public class RectFill : CommandThreeParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandThreeParameters RectFill Implements ICommand Inherited Members CommandThreeParameters.param3 CommandThreeParameters.param3unprocessed CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields fill Indicates whether the rectangle should be filled or not. Default is false. public bool fill Field Value bool Methods CheckParameters(string[]) Validates and processes the input parameters for the rectangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of strings containing width, height, and optional fill value. Remarks If three parameters are provided, the third parameter is parsed as a boolean to determine the fill status. If only two parameters are provided, the rectangle is not filled by default. Exceptions CanvasException Thrown if the number of parameters exceeds the expected limit. Execute() Executes the rectangle drawing command on the canvas. public override void Execute() Remarks The rectangle is drawn using the width, height, and fill parameters."
  },
  "api/ASE_Assignment.html": {
    "href": "api/ASE_Assignment.html",
    "title": "Namespace ASE_Assignment | ASE Documentation",
    "keywords": "Namespace ASE_Assignment Classes CircleFill CustomArrayCommand Represents a custom array command class that inherits from BOOSE.Array CustomCanvas CustomCanvas provides a drawing surface using a PictureBox for output. It implements the BOOSE.ICanvas interface and supports drawing lines, shapes, and text, as well as changing the pen color and clearing the canvas. CustomCommandFactory A custom command factory extending BOOSE.CommandFactory to provide additional commands (e.g., \"tri\", \"write\", \"int\", \"real\", \"array\", \"while\", \"for\", \"if\", \"else\", \"end\", and \"method\"). Unrecognized commands are passed to the base factory or result in an exception. CustomElseCommand Represents a custom implementation of the 'else' control structure, extending the base BOOSE.Else class CustomForCommand Represents a custom implementation of the 'for' loop control structure, extending the base BOOSE.For class CustomIfCommand Represents a custom implementation of the 'if' conditional statement, extending the base BOOSE.If class CustomIntCommand Represents a custom implementation of the integer data type, extending the base BOOSE.Int class CustomRealComand Represents a custom implementation of the real (floating-point) data type, extending the base BOOSE.Real class CustomStoredProgram Represents a custom implementation of the StoredProgram class that executes commands sequentially while providing additional safety checks and error handling. CustomTriangleCommand A custom command for drawing a triangle on the canvas. Inherits from BOOSE.CommandTwoParameters to handle width and height parameters. CustomWhileCommand Represents a custom implementation of the While command with modified restrictions. This class extends the base While command functionality while allowing for more flexible execution parameters. CustomWriteCommand A custom command for writing text on the canvas. Inherits from BOOSE.CommandOneParameter to handle a single parameter (the text to write). Form1 The main form of the application that provides an interface to write BOOSE scripts, run them, clear the canvas, and save the canvas image. RectFill Represents a command to draw a rectangle with optional fill functionality on a canvas."
  },
  "api/AssignTests.CustomCanvasOperations.html": {
    "href": "api/AssignTests.CustomCanvasOperations.html",
    "title": "Class CustomCanvasOperations | ASE Documentation",
    "keywords": "Class CustomCanvasOperations Namespace AssignTests Assembly AssignTests.dll [TestClass] public class CustomCanvasOperations Inheritance object CustomCanvasOperations Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods InitializeCanvas() [TestInitialize] public void InitializeCanvas() VerifyCanvasClear() Ensures the canvas clears correctly. [TestMethod] public void VerifyCanvasClear() VerifyCanvasReset() Ensures the canvas resets to its initial state. [TestMethod] public void VerifyCanvasReset()"
  },
  "api/AssignTests.CustomFlowCommands.html": {
    "href": "api/AssignTests.CustomFlowCommands.html",
    "title": "Class CustomFlowCommands | ASE Documentation",
    "keywords": "Class CustomFlowCommands Namespace AssignTests Assembly AssignTests.dll [TestClass] public class CustomFlowCommands Inheritance object CustomFlowCommands Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods InitializeCanvas() [TestInitialize] public void InitializeCanvas() MethodExecution_ReturnsExpectedResult() Verifies method calls execute and return correct results. [TestMethod] public void MethodExecution_ReturnsExpectedResult() ValidateElseCommand() Ensures alternate logic executes as expected. [TestMethod] public void ValidateElseCommand() ValidateForLoopCommand() Verifies loop iterations execute the expected number of times. [TestMethod] public void ValidateForLoopCommand() ValidateIfCommand() Validates that conditional logic executes correctly. [TestMethod] public void ValidateIfCommand() ValidateWhileLoop() Confirms while loops terminate as expected. [TestMethod] public void ValidateWhileLoop()"
  },
  "api/AssignTests.CustomVarNAssignTests.html": {
    "href": "api/AssignTests.CustomVarNAssignTests.html",
    "title": "Class CustomVarNAssignTests | ASE Documentation",
    "keywords": "Class CustomVarNAssignTests Namespace AssignTests Assembly AssignTests.dll [TestClass] public class CustomVarNAssignTests Inheritance object CustomVarNAssignTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ArrayCommand_AssignmentWorksCorrectly() Verifies that array commands assign and retrieve values correctly. [TestMethod] public void ArrayCommand_AssignmentWorksCorrectly() InitializeCanvas() [TestInitialize] public void InitializeCanvas() ValidateIntegerAssignment() Verifies that the integer command assigns values correctly. [TestMethod] public void ValidateIntegerAssignment() ValidateRealNumberCommand() Verifies that the real number command handles precise floating-point values. [TestMethod] public void ValidateRealNumberCommand()"
  },
  "api/AssignTests.Test1.html": {
    "href": "api/AssignTests.Test1.html",
    "title": "Class Test1 | ASE Documentation",
    "keywords": "Class Test1 Namespace AssignTests Assembly AssignTests.dll Contains unit tests for verifying core functionality of BOOSE drawing commands and their integration with the CustomCanvas. [TestClass] public sealed class Test1 Inheritance object Test1 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods DrawTo_ShouldUpdatePenPosition() Ensures that calling DrawTo(int, int) updates the pen position after drawing a line. [TestMethod] public void DrawTo_ShouldUpdatePenPosition() Moveto_ShouldUpdatePenPosition() Verifies that calling MoveTo(int, int) updates the pen position correctly. [TestMethod] public void Moveto_ShouldUpdatePenPosition() MultilineProgram_ShouldExecuteAllCommandsCorrectly() Tests a multiline script containing multiple commands to ensure that all commands are parsed and executed correctly in sequence. [TestMethod] public void MultilineProgram_ShouldExecuteAllCommandsCorrectly()"
  },
  "api/AssignTests.TestCanvasFunctions.html": {
    "href": "api/AssignTests.TestCanvasFunctions.html",
    "title": "Class TestCanvasFunctions | ASE Documentation",
    "keywords": "Class TestCanvasFunctions Namespace AssignTests Assembly AssignTests.dll [TestClass] public class TestCanvasFunctions Inheritance object TestCanvasFunctions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ArrayCommand_AssignmentWorksCorrectly() Verifies that array commands assign and retrieve values correctly. [TestMethod] public void ArrayCommand_AssignmentWorksCorrectly() InitializeCanvas() [TestInitialize] public void InitializeCanvas() MethodExecution_ReturnsExpectedResult() Verifies method calls execute and return correct results. [TestMethod] public void MethodExecution_ReturnsExpectedResult() ValidateElseCommand() Ensures alternate logic executes as expected. [TestMethod] public void ValidateElseCommand() ValidateForLoopCommand() Verifies loop iterations execute the expected number of times. [TestMethod] public void ValidateForLoopCommand() ValidateIfCommand() Validates that conditional logic executes correctly. [TestMethod] public void ValidateIfCommand() ValidateIntegerAssignment() Verifies that the integer command assigns values correctly. [TestMethod] public void ValidateIntegerAssignment() ValidateRealNumberCommand() Verifies that the real number command handles precise floating-point values. [TestMethod] public void ValidateRealNumberCommand() ValidateWhileLoop() Confirms while loops terminate as expected. [TestMethod] public void ValidateWhileLoop() VerifyCanvasClear() Ensures the canvas clears correctly. [TestMethod] public void VerifyCanvasClear() VerifyCanvasReset() Ensures the canvas resets to its initial state. [TestMethod] public void VerifyCanvasReset()"
  },
  "api/AssignTests.html": {
    "href": "api/AssignTests.html",
    "title": "Namespace AssignTests | ASE Documentation",
    "keywords": "Namespace AssignTests Classes CustomCanvasOperations CustomFlowCommands CustomVarNAssignTests Test1 Contains unit tests for verifying core functionality of BOOSE drawing commands and their integration with the CustomCanvas. TestCanvasFunctions"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ASE Documentation",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ASE Documentation",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ASE Documentation",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}